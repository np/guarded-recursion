open import Data.Nat
  using (โ; zero; suc; _+_)
open import Data.Product
  using (ฮฃ; _,_)
  renaming (projโ to fst; projโ to snd)
{-
-- using agda-nplib
open import Relation.Binary.PropositionalEquality.NP
  using (_โก_; _โ_; !; ap; idp)
-}
-- using stdlib only
open import Relation.Binary.PropositionalEquality
  using (_โก_; trans)
  renaming (sym to !; refl to idp; cong to ap)

module guarded-recursion.model where

-- using stdlib only
infixr 8 _โ_
_โ_ = trans

Type = Set

postulate
  funext : โ {A : Type} {B : A โ Type}
             (f g : (x : A) โ B x)
           โ โ x โ f x โก g x
           โ f โก g

-- โสทแตแต (โ^{ฯ}^{op})
module Presheaf
  (Objโฑ : Type)
  (_โโฑ_ : Objโฑ โ Objโฑ โ Type)
  (idโฑ  : {A : Objโฑ} โ A โโฑ A)
  (_โโฑ_ : {A B C : Objโฑ} โ (B โโฑ C) โ (A โโฑ B) โ (A โโฑ C))
  (โ-idโฑ : {A B : Objโฑ} {f : A โโฑ B} โ f โโฑ idโฑ โก f)
  (id-โโฑ : {A B : Objโฑ} {f : A โโฑ B} โ idโฑ โโฑ f โก f)
  (โ-assocโฑ : {A B C D : Objโฑ}
              {f : C โโฑ D} {g : B โโฑ C} {h : A โโฑ B}
              โ (f โโฑ g) โโฑ h โก f โโฑ (g โโฑ h))
  (๐โฑ : Objโฑ)
  (!โฑ : {A : Objโฑ} โ A โโฑ ๐โฑ)
  (!-uniqโฑ : {A : Objโฑ} {f : A โโฑ ๐โฑ} โ f โก !โฑ)
  where

  Objแต : Type
  Objแต = ฮฃ (โ โ Objโฑ) ฮป A โ
           (n : โ) โ A (1 + n) โโฑ A n

  _โแต_ : Objแต โ Objแต โ Type
  (A , rแดฌ) โแต (B , rแดฎ) = ฮฃ ((n : โ) โ A n โโฑ B n) ฮป f โ
                            (n : โ) โ f n โโฑ rแดฌ n โก rแดฎ n โโฑ f (1 + n)

  idแต : {A : Objแต} โ A โแต A
  idแต = (ฮป n โ idโฑ) , (ฮป n โ id-โโฑ โ ! โ-idโฑ)

  {-
      B ---f--> D
      ^         ^
      |         |
      g         h
      |         |
      A ---i--> C
  -}
  module _ {A B C D}
           (f : B โโฑ D) (g : A โโฑ B)
           (h : C โโฑ D) (i : A โโฑ C) where
    Squareโฑ = f โโฑ g โก h โโฑ i

  module _ {A B} {f g : A โโฑ B} where
    ap-โโฑ  : โ {X} {h : X โโฑ A} โ f โก g โ f โโฑ h โก g โโฑ h
    ap-โโฑ {h = h} = ap (ฮป x โ x โโฑ h)

    ap-โโฑ' : โ {X} {h : B โโฑ X} โ f โก g โ h โโฑ f โก h โโฑ g
    ap-โโฑ' {h = h} = ap (_โโฑ_ h)

  !-irrโฑ : {A : Objโฑ} {f g : A โโฑ ๐โฑ} โ f โก g
  !-irrโฑ = !-uniqโฑ โ ! !-uniqโฑ

  โ-!โฑ : {A : Objโฑ} {f : ๐โฑ โโฑ A} { !g : ๐โฑ โโฑ ๐โฑ} โ f โโฑ !g โก f
  โ-!โฑ = ap-โโฑ' !-irrโฑ โ โ-idโฑ

  with-โ-assocโฑ : {A B C C' D : Objโฑ}
              {f  : C  โโฑ D} {g  : B โโฑ C}
              {f' : C' โโฑ D} {g' : B โโฑ C'}
              {h : A โโฑ B}
              โ f โโฑ g โก f' โโฑ g'
              โ f โโฑ (g โโฑ h) โก f' โโฑ (g' โโฑ h)
  with-โ-assocโฑ p = ! โ-assocโฑ โ ap-โโฑ p โ โ-assocโฑ

  {-
      B ---f--> D ---e--> F
      ^         ^         ^
      |         |         |
      g    L    h    R    j
      |         |         |
      A ---i--> C ---k--> E
  -}
  module _
           {A B C D E F}
           {f : B โโฑ D} {g : A โโฑ B}
           {h : C โโฑ D} {i : A โโฑ C}
           {e : D โโฑ F}
           {j : E โโฑ F} {k : C โโฑ E}
           (L : Squareโฑ f g h i)
           (R : Squareโฑ e h j k) where

      private
        efg-ehi : (e โโฑ f) โโฑ g โก e โโฑ (h โโฑ i)
        efg-ehi = โ-assocโฑ โ ap-โโฑ' L

        ehi-jki : e โโฑ (h โโฑ i) โก j โโฑ (k โโฑ i)
        ehi-jki = ! โ-assocโฑ โ ap-โโฑ R โ โ-assocโฑ

      LR : Squareโฑ (e โโฑ f) g j (k โโฑ i)
      LR = efg-ehi โ ehi-jki

  _โแต_ : {A B C : Objแต} โ (B โแต C) โ (A โแต B) โ (A โแต C)
  (f , โf) โแต (g , โg) = (ฮป n โ f n โโฑ g n)
                       , (ฮป n โ LR (โg n) (โf n))

  -- TODO: the real thingโข
  _โกแต_ : {A B : Objแต} (f g : A โแต B) โ Type
  (f , _) โกแต (g , _) = โ n โ f n โก g n
  infix 2 _โกแต_

  โ-idแต : {A B : Objแต} {f : A โแต B} โ f โแต idแต โกแต f
  โ-idแต _ = โ-idโฑ

  id-โแต : {A B : Objแต} {f : A โแต B} โ idแต โแต f โกแต f
  id-โแต _ = id-โโฑ

  โ-assocแต : {A B C D : Objแต}
             {f : C โแต D} {g : B โแต C} {h : A โแต B}
             โ (f โแต g) โแต h โกแต f โแต (g โแต h)
  โ-assocแต _ = โ-assocโฑ

  ๐แต : Objแต
  ๐แต = (ฮป _ โ ๐โฑ) , (ฮป _ โ idโฑ)
  !แต : {A : Objแต} โ A โแต ๐แต
  !แต = (ฮป _ โ !โฑ) , (ฮป _ โ !-irrโฑ)
  !-uniqแต : {A : Objแต} {f : A โแต ๐แต} โ f โกแต !แต
  !-uniqแต _ = !-uniqโฑ

  [_]แต : Objโฑ โ Objแต
  [ A ]แต = (ฮป _ โ A) , (ฮป _ โ idโฑ)

  โธ : Objแต โ Objแต
  โธ (A , rแดฌ) = โธA , โธrแดฌ
     module Later where
       โธA : โ โ Objโฑ
       โธA 0       = ๐โฑ
       โธA (suc n) = A n
       โธrแดฌ : (n : โ) โ โธA (1 + n) โโฑ โธA n
       โธrแดฌ 0       = !โฑ
       โธrแดฌ (suc n) = rแดฌ n

  next : {A : Objแต} โ A โแต โธ A
  next {A , rแดฌ} = f , โ
     module Next where
       open Later A rแดฌ
       f : (n : โ) โ A n โโฑ โธA n
       f 0       = !โฑ
       f (suc n) = rแดฌ n

       โ : (n : โ) โ f n โโฑ rแดฌ n โก โธrแดฌ n โโฑ f (1 + n)
       โ 0       = idp
       โ (suc n) = idp

  -- TODO: naturality of next

  module _ {A : Objแต} (f : A โแต A) where
    Contractive = ฮฃ (โธ A โแต A) ฮป g โ f โกแต g โแต next

  module _ {A B : Objโฑ} {i : B โโฑ B} {f : A โโฑ B} where
    id-โโฑ' : i โก idโฑ โ i โโฑ f โก f
    id-โโฑ' p = ap-โโฑ p โ id-โโฑ
  module _ {A B : Objโฑ} {i : A โโฑ A} {f : A โโฑ B} where
    โ-idโฑ' : i โก idโฑ โ f โโฑ i โก f
    โ-idโฑ' p = ap-โโฑ' p โ โ-idโฑ

  fix : {A : Objแต} (f : โธ A โแต A) โ ๐แต โแต A
  fix {A , rแดฌ} (f , โ) = fixf , ฮป n โ โ-idโฑ โ fixโ n
    module Fix where
      open Later A rแดฌ

      fixf : (n : โ) โ ๐โฑ โโฑ A n
      fixf 0       = f 0
      fixf (suc n) = f (suc n) โโฑ fixf n

      fixโ : (n : โ) โ fixf n โก rแดฌ n โโฑ fixf (1 + n)
      fixโ 0       = ! โ-!โฑ          โ with-โ-assocโฑ (โ 0)
      fixโ (suc n) = ap-โโฑ' (fixโ n) โ with-โ-assocโฑ (โ (suc n))

  module WithProducts
    (_รโฑ_ : Objโฑ โ Objโฑ โ Objโฑ)
    -- projections
    (fstโฑ : โ {A B} โ (A รโฑ B) โโฑ A)
    (sndโฑ : โ {A B} โ (A รโฑ B) โโฑ B)
    -- injection (pair creation)
    (<_,_>โฑ : โ {A B C} โ A โโฑ B โ A โโฑ C โ A โโฑ (B รโฑ C))
    -- computation rules
    (fst-<,> : โ {A B C} {f : A โโฑ B} {g : A โโฑ C}
               โ fstโฑ โโฑ < f , g >โฑ โก f)
    (snd-<,> : โ {A B C} {f : A โโฑ B} {g : A โโฑ C}
               โ sndโฑ โโฑ < f , g >โฑ โก g)
    -- ฮท-rule
    (<fst,snd> : โ {A B} โ < fstโฑ , sndโฑ >โฑ โก idโฑ {A รโฑ B})
    -- universal property
    (<,>-โ : โ {A B C X} {fโ : A โโฑ B} {fโ : A โโฑ C} {g : X โโฑ A}
             โ < fโ , fโ >โฑ โโฑ g โก < fโ โโฑ g , fโ โโฑ g >โฑ)
    where

    firstโฑ : โ {A B C} โ A โโฑ B โ (A รโฑ C) โโฑ (B รโฑ C)
    firstโฑ f = < f โโฑ fstโฑ , sndโฑ >โฑ

    secondโฑ : โ {A B C} โ B โโฑ C โ (A รโฑ B) โโฑ (A รโฑ C)
    secondโฑ f = < fstโฑ , f โโฑ sndโฑ >โฑ

    <_ร_>โฑ : โ {A B C D} (f : A โโฑ C) (g : B โโฑ D) โ (A รโฑ B) โโฑ (C รโฑ D)
    < f ร g >โฑ = < f โโฑ fstโฑ , g โโฑ sndโฑ >โฑ

    module _ {A B C} {f f' : A โโฑ B} {g g' : A โโฑ C} where
        โก<_,_> : f โก f' โ g โก g' โ < f , g >โฑ โก < f' , g' >โฑ
        โก< p , q > = ap (ฮป f โ < f , g >โฑ) p โ ap (ฮป g โ < f' , g >โฑ) q

    module _ {A B} where
        <fst,idโsnd> : < fstโฑ , idโฑ โโฑ sndโฑ >โฑ โก idโฑ {A รโฑ B}
        <fst,idโsnd> = โก< idp , id-โโฑ > โ <fst,snd>

    _รแต_ : Objแต โ Objแต โ Objแต
    (A , rแดฌ) รแต (B , rแดฎ) = (ฮป n โ A n รโฑ B n) , (ฮป n โ < rแดฌ n ร rแดฎ n >โฑ)

    <_,_>แต : โ {A B C} โ A โแต B โ A โแต C โ A โแต (B รแต C)
    <_,_>แต {A , rแดฌ} {B , rแดฎ} {C , rแถ} (f , fโ) (g , gโ) =
      (ฮป n โ < f n , g n >โฑ) ,
      (ฮป n โ <,>-โ
           โ โก< fโ n โ ap-โโฑ' (! fst-<,>) โ ! โ-assocโฑ
              , gโ n โ ap-โโฑ' (! snd-<,>) โ ! โ-assocโฑ >
           โ ! <,>-โ)

    _^_  : Objโฑ โ โ โ Objโฑ
    A ^ 0      = ๐โฑ
    A ^(suc n) = A รโฑ (A ^ n)

    module _ {A} where
        initโฑ : โ n โ (A ^(1 + n)) โโฑ (A ^ n)
        initโฑ zero    = !โฑ
        initโฑ (suc n) = secondโฑ (initโฑ n)

    module Str1
      (A    : Objโฑ)
      where
      Str : โ โ Objโฑ
      Str n = A ^(1 + n)

      rStr : (n : โ) โ Str (1 + n) โโฑ Str n
      rStr = ฮป n โ initโฑ (1 + n)

      Strแต : Objแต
      Strแต = Str , rStr

      open Later Str (snd Strแต) renaming (โธA to โธStr; โธrแดฌ to โธrStr)

      roll : (n : โ) โ (A ^ n) โโฑ โธStr n
      roll 0       = !โฑ -- or idโฑ {๐โฑ}
      roll (suc n) = idโฑ
      unroll : (n : โ) โ โธStr n โโฑ (A ^ n)
      unroll 0       = !โฑ -- or idโฑ {๐โฑ}
      unroll (suc n) = idโฑ

      hdแต : Strแต โแต [ A ]แต
      hdแต = (ฮป _ โ fstโฑ) , (ฮป n โ fst-<,> โ ! id-โโฑ)

      tlแต : Strแต โแต โธ Strแต
      tlแต = f , โ
        where
          f : (n : โ) โ Str n โโฑ โธStr n
          f n = roll n โโฑ sndโฑ
          โ : (n : โ) โ f n โโฑ rStr n โก โธrStr n โโฑ f (1 + n)
          โ 0       = !-irrโฑ
          โ (suc n) = โ-assocโฑ โ id-โโฑ โ snd-<,> โ ap-โโฑ' (! id-โโฑ)

      โทแต : ([ A ]แต รแต โธ Strแต) โแต Strแต
      โทแต = f , โ
        where
          f : (n : โ) โ (A รโฑ โธStr n) โโฑ Str n
          f n = secondโฑ (unroll n)
          โ : (n : โ) โ f n โโฑ snd ([ A ]แต รแต โธ Strแต) n โก rStr n โโฑ f (1 + n)
          โ 0       = <,>-โ โ โก< fst-<,> โ id-โโฑ , !-irrโฑ > โ !(โ-idโฑ' <fst,idโsnd>)
          โ (suc n) = id-โโฑ' <fst,idโsnd> โ โก< id-โโฑ , idp > โ !(โ-idโฑ' <fst,idโsnd>)

      repeatแต : (๐แต โแต [ A ]แต) โ ๐แต โแต Strแต
      repeatแต f = fix repeatแตโฒ
        where repeatแตโฒ : โธ Strแต โแต Strแต
              repeatแตโฒ = โทแต โแต < f โแต !แต , idแต >แต

{-
      mapแต : ([ A ]แต โแต [ A ]แต) โ Strแต โแต Strแต
      mapแต f = {!fix!}

  module _
    (A B : โ โ Objโฑ)
    (rแดฌ  : (n : โ) โ A (1 + n) โโฑ A n)
    (rแดฎ  : (n : โ) โ B (1 + n) โโฑ B n)
    (f   : (n : โ) โ A n โโฑ B n)
    (โf  : (n : โ) โ f n โโฑ rแดฌ n โก rแดฎ n โโฑ f (1 + n))
    where

    --โn :

-- -}
-- -}
-- -}
-- -}
